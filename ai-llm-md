# 📘 CosmosWatcher – Dev Overview & Tenant Auth Logic

**CosmosWatcher** is a multi-tenant Linux system observation and administration suite, consisting of three coordinated components:

- **Observer**: Lightweight agent deployed on systems to monitor and report data  
- **Singularity**: Backend service written in Go (Gorilla Mux + PostgreSQL)  
- **Horizon**: Responsive frontend built with SvelteKit 5 + TailwindCSS + DaisyUI  

---

## 🔧 Backend (Singularity)

### 🔐 Authentication

- **JWT-based** using `access_token`
- Tokens include:
  - `sub`, `email`, `is_global_admin`, `tenants[]` (id, name, slug, role)
- Middleware:
  - Extracts JWT from `Authorization` header
  - Uses `X-Tenant-ID` to determine current tenant context
  - Injects context values: `UserKey`, `TenantKey`

### 👥 Users & Tenants

- Global users stored in `users` table
- Users can belong to multiple tenants via `tenant_users`
- Roles per tenant: `user`, `admin`
- `is_global_admin` flag gives access to platform-wide routes

#### ➕ Signup Flow (`POST /api/signup`)

- Accepts: `email`, `password`, `org_name`, `account_only`
- If user does not exist:
  - Account is created with `is_verified = false`
- If no tenant is selected:
  - User can create a new tenant if:
    - They provided `org_name`
    - They have no tenant memberships
- Slug is generated from org name using `slugify`
- Error handling:
  - `409` for existing email or slug, with clear frontend messages

#### ➕ Tenant Creation (`POST /api/tenant`)

- **Allowed if**:
  - User is a global admin **or**
  - User has no tenants yet
- Global admins are **not** added to new tenants unless it’s their first
- Regular users are added as `admin` to the new tenant

### 📦 Database

- **PostgreSQL**, managed with **Go Migrate**
- Accessed via manual SQL using `dbs.Query`, `dbs.QueryRow`
- Shared structs live in the `types` package

#### Schema Overview

```sql
CREATE TABLE tenant (
  id UUID PRIMARY KEY,
  slug TEXT UNIQUE,
  name TEXT,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE users (
  id UUID PRIMARY KEY,
  email TEXT UNIQUE,
  hashed_password TEXT,
  is_verified BOOLEAN DEFAULT false,
  is_global_admin BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  last_login_at TIMESTAMPTZ
);

CREATE TABLE tenant_users (
  id UUID PRIMARY KEY,
  tenant_id UUID REFERENCES tenant(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'user',
  joined_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (tenant_id, user_id)
);
Response Example
go
Copy
Edit
type TenantResponse struct {
  ID        string    `json:"id"`
  Slug      string    `json:"slug"`
  Name      string    `json:"name"`
  IsActive  bool      `json:"is_active"`
  CreatedAt time.Time `json:"created_at"`
  UserCount int       `json:"user_count"`
}
🎨 Frontend (Horizon)
🧱 Tech Stack
SvelteKit 5

TailwindCSS + DaisyUI (custom space-themed OKLCH palette)

🌌 Theme Philosophy
Observer = minimal, silent, observant

Singularity = central, powerful, gravitational

Horizon = visible, insightful, interactive

🧭 Sidebar Navigation
Logo: 🌌 CosmosWatcher + Horizon Portal

Routes:

/home – Dashboard

/agents – Observers

/tenant-admin – Tenant-level admin

/global-admin – Global admin panel (only visible if is_global_admin)

🧠 Tenant Management
Tenant list decoded from JWT payload

selectedTenant:

Saved to localStorage

Managed via writable Svelte store

Auto-selects first tenant if none is stored

Modal-based tenant switcher

🔐 Auth Handling
Login UI: /login

Local storage keys:

access_token, user_payload, selected_tenant

isLoggedIn() checks for valid token presence and expiration

(app) layout uses guard to block unauthenticated access

🛠 Admin Features
🌍 Global Admin Panel
Path: /global-admin

Lists all tenants (GET /singularity/api/tenants)

Can create new tenants (POST /api/tenant)

Name + auto-generated or provided slug

🏢 Tenant Admin Panel
Path: /tenant-admin

Shows users in the current tenant

Supports:

Invite via email + optional name + role

If user exists: added to tenant

If user does not exist: user created + temp password shown

Modal displays onboarding info (e.g., temp password copy)

🆕 Tenant Creation Modal (Frontend)
Shown if selectedTenant is empty but user is logged in

Available to:

Global admins

Users with no tenants

Calls POST /api/tenant

On success:

Updates tenant list

Adds user to new tenant (if non-admin)

✅ Status
✔️ Multi-tenant JWT auth functional

✔️ Signup + Tenant creation logic in place

✔️ Tenant context switching operational

✔️ Tenant & user management UIs implemented

✔️ Role-based routing + access control

This document serves as a technical summary and onboarding reference for development across all CosmosWatcher components.