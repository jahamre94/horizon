# CosmosWatcher â€“ Development Context Summary

**CosmosWatcher** is a multi-tenant Linux system observation and administration suite, consisting of three coordinated components:

* **Observer**: Lightweight agent deployed on systems to monitor and report data
* **Singularity**: Backend service written in Go (Gorilla Mux + PostgreSQL)
* **Horizon**: Responsive frontend built with SvelteKit 5 + TailwindCSS + DaisyUI

---

## ðŸ”§ Backend (Singularity)

* **Authentication**: JWT-based using `access_token`

  * Tokens include `sub`, `email`, `is_global_admin`, and `tenants[]` (id, name, slug, role)
  * Middleware extracts JWT from `Authorization` header and tenant from `X-Tenant-ID`
  * Context keys (`UserKey`, `TenantKey`) used across the Go app

* **Users & Tenants**:

  * Users can belong to multiple tenants via `tenant_users` table
  * Global admin (`is_global_admin`) flag gives access to platform-wide routes

* **Routing**:

  * Uses Gorilla Mux router
  * `/api` routes protected with middleware, e.g., `/api/login`, `/api/info` are public
  * Serves the Svelte frontend via reverse proxy in dev mode

* **Database**:

  * PostgreSQL
  * Managed with Go Migrate

---

## ðŸŽ¨ Frontend (Horizon)

* **Tech Stack**:

  * SvelteKit 5 (routing, layout, +page.ts/+.svelte)
  * TailwindCSS
  * DaisyUI with custom OKLCH-based space-themed design

* **Theme Philosophy**:

  * **Observer** = minimal, silent, observant
  * **Singularity** = central, powerful, gravitational
  * **Horizon** = visible, insightful, interactive

* **Sidebar Navigation**:

  * Logo: `ðŸŒŒ CosmosWatcher` + Horizon Portal label
  * Nav links:

    * `/home` â€“ Dashboard
    * `/agents` â€“ Observers
    * `/tenant-admin` â€“ Tenant-level admin
    * `/global-admin` â€“ Global admin panel (only visible if `is_global_admin` is true)
  * Responsive drawer UI
  * Logout clears localStorage and redirects to `/login`

* **Tenant Management**:

  * Tenant list loaded from JWT payload
  * Auto-selects first tenant if none stored
  * `selected_tenant` saved in localStorage and in a writable Svelte store
  * Tenant switcher modal allows changing context

* **Authentication Handling**:

  * Login page at `/login`
  * Token and user data (`access_token`, `user_payload`, `selected_tenant`) stored in `localStorage`
  * `isLoggedIn()` checks token presence and expiration
  * Layout guard in `(app)` verifies login before rendering

---

## âœ… Status

* Login and multi-tenant JWT auth working end-to-end
* Sidebar and navigation functional and styled
* Theme is dark-space optimized with high contrast and branded sections
* Tenant context switching operational

---

This file serves as a session primer or onboarding doc for continued development, frontend/backend coordination, and UI/UX iteration.

    